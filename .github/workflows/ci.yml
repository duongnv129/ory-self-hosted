name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: multi-tenancy-demo/package-lock.json

      - name: Install demo dependencies
        working-directory: multi-tenancy-demo
        run: npm ci

      - name: Lint JavaScript
        working-directory: multi-tenancy-demo
        run: |
          if [ -f "package.json" ] && grep -q '"lint"' package.json; then
            npm run lint || echo "No lint script found, skipping"
          fi

      - name: Validate YAML files
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint.yml
          file_or_dir: |
            kratos/config/*.yml
            keto/config/*.yml
            oathkeeper/config/*.yml
            */docker-compose.yaml
          strict: false

      - name: Validate JSON files
        run: |
          find . -name "*.json" -not -path "*/node_modules/*" -exec sh -c '
            for file do
              echo "Validating $file"
              jq empty "$file" || exit 1
            done
          ' sh {} +

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Node.js for audit
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: NPM audit
        working-directory: multi-tenancy-demo
        run: |
          npm audit --audit-level=high || true
          npm audit --json > audit-report.json || true

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-report
          path: multi-tenancy-demo/audit-report.json

  test:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Docker network
        run: docker network create ory-network

      - name: Start PostgreSQL
        run: |
          cd postgres
          docker-compose up -d
          sleep 5

      - name: Wait for PostgreSQL
        run: |
          timeout 30 bash -c 'until docker exec postgres pg_isready -U postgres; do sleep 1; done'

      - name: Start Kratos
        run: |
          cd kratos
          docker-compose up -d
          sleep 10

      - name: Wait for Kratos
        run: |
          timeout 60 bash -c 'until curl -sf http://localhost:4433/health/ready; do sleep 2; done'

      - name: Start Keto
        run: |
          cd keto
          docker-compose up -d
          sleep 10

      - name: Wait for Keto
        run: |
          timeout 60 bash -c 'until curl -sf http://localhost:4466/health/ready; do sleep 2; done'

      - name: Health Check - Kratos
        run: |
          curl -f http://localhost:4433/health/ready
          curl -f http://localhost:4434/health/ready

      - name: Health Check - Keto
        run: |
          curl -f http://localhost:4466/health/ready
          curl -f http://localhost:4467/health/ready

      - name: Test Kratos Identity Creation
        run: |
          response=$(curl -s -X POST http://localhost:4434/admin/identities \
            -H "Content-Type: application/json" \
            -d '{
              "schema_id": "default",
              "traits": {
                "email": "test@example.com",
                "name": {"first": "Test", "last": "User"},
                "tenant_ids": ["tenant-test"]
              }
            }')
          echo "$response"
          echo "$response" | jq -e '.id' || exit 1

      - name: Test Keto Relation Creation
        run: |
          curl -f -X PUT http://localhost:4467/admin/relation-tuples \
            -H "Content-Type: application/json" \
            -d '{
              "namespace": "default",
              "object": "role:admin",
              "relation": "member",
              "subject_id": "user:test@example.com"
            }'

      - name: Test Keto Permission Check
        run: |
          response=$(curl -s -G http://localhost:4466/relation-tuples/check \
            --data-urlencode "namespace=default" \
            --data-urlencode "object=role:admin" \
            --data-urlencode "relation=member" \
            --data-urlencode "subject_id=user:test@example.com")
          echo "$response"
          echo "$response" | jq -e '.allowed == true' || exit 1

      - name: Build Multi-Tenancy Demo
        run: |
          cd multi-tenancy-demo
          docker-compose build

      - name: Start Multi-Tenancy Demo
        run: |
          cd multi-tenancy-demo
          docker-compose up -d
          sleep 10

      - name: Test Demo Health
        run: |
          curl -f http://localhost:9000/health

      - name: Test Demo API Docs
        run: |
          curl -f http://localhost:9000/api-docs

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Kratos Logs ==="
          cd kratos && docker-compose logs kratos || true
          echo "=== Keto Logs ==="
          cd keto && docker-compose logs keto || true
          echo "=== Demo Logs ==="
          cd multi-tenancy-demo && docker-compose logs || true

      - name: Cleanup
        if: always()
        run: |
          cd multi-tenancy-demo && docker-compose down -v || true
          cd keto && docker-compose down -v || true
          cd kratos && docker-compose down -v || true
          cd postgres && docker-compose down -v || true
          docker network rm ory-network || true

  build-demo:
    name: Build & Push Demo Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/ory-multi-tenancy-demo
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./multi-tenancy-demo
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-demo]
    if: github.event_name == 'push'
    environment:
      name: production
      url: https://example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl, docker-compose, helm, etc.

  notification:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    if: always()
    steps:
      - name: Check job status
        id: check
        run: |
          if [ "${{ needs.lint.result }}" = "failure" ] || \
             [ "${{ needs.security.result }}" = "failure" ] || \
             [ "${{ needs.test.result }}" = "failure" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        if: steps.check.outputs.status == 'failure'
        run: |
          echo "Pipeline failed. Sending notification..."
          # Add notification logic here (Slack, Email, etc.)
