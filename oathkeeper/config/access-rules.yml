# access-rules.yml

# =============================================================================
# Authentication Routes (Next.js Web App)
# =============================================================================

# Allow anonymous access to auth pages (login, register)
- id: "auth-pages"
  upstream:
    url: "http://host.docker.internal:3000"
    preserve_path: true
  match:
    url: "<http|https>://<.*>/(login|register)"
    methods:
      - GET
  authenticators:
    - handler: anonymous
  authorizer:
    handler: allow
  mutators:
    - handler: noop

# Proxy Kratos self-service flows (login, registration, etc)
- id: "kratos-self-service"
  upstream:
    url: "http://kratos:4433"
    preserve_path: true
  match:
    url: "<http|https>://<.*>/self-service/<.*>"
    methods:
      - GET
      - POST
  authenticators:
    - handler: anonymous
  authorizer:
    handler: allow
  mutators:
    - handler: noop

# Proxy Kratos session endpoint (requires authentication)
- id: "kratos-session"
  upstream:
    url: "http://kratos:4433"
    preserve_path: true
  match:
    url: "<http|https>://<.*>/sessions/whoami"
    methods:
      - GET
  authenticators:
    - handler: cookie_session
  authorizer:
    handler: allow
  mutators:
    - handler: header
      config:
        headers:
          X-User-Id: "{{ .Subject }}"
          X-User-Email: "{{ .Extra.identity.traits.email }}"

# =============================================================================
# API Routes (Multi-Tenancy Demo)
# =============================================================================

- id: "health-check-rule"
  upstream:
    url: "http://multi-tenancy-demo:9000"
  match:
    url: "<http|https>://<.*>/health"
    methods:
      - GET
  authenticators:
    - handler: anonymous
  authorizer:
    handler: allow
  mutators:
    - handler: noop

# =============================================================================
# Use Case 1: Simple RBAC (Global Role-Based Access Control)
# Path: /api/simple-rbac/* -> strips prefix to /*
# =============================================================================

# Simple RBAC - Users API
- id: "simple-rbac-users-rule"
  upstream:
    url: "http://multi-tenancy-demo:9000"
    strip_path: "/api/simple-rbac"
  match:
    url: "<http|https>://<.*>/api/simple-rbac/users/<[^/]+><.*>"
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - PATCH
  authenticators:
    - handler: cookie_session
    - handler: bearer_token
  authorizer:
    handler: remote_json
    config:
      remote: "http://keto:4466/relation-tuples/check"
      payload: |
        {
          "namespace": "simple-rbac",
          "object": "user:items",
          "relation": "{{ if eq (index .MatchContext.RegexpCaptureGroups 0) "list" }}view{{ else }}{{ index .MatchContext.RegexpCaptureGroups 0 }}{{ end }}",
          "subject_id": "user:{{ print .Extra.identity.traits.email }}"
        }
  mutators:
    - handler: header
      config:
        headers:
          X-User-Id: "{{ .Subject }}"
          X-User-Email: "{{ .Extra.identity.traits.email }}"
          X-User-Traits: "{{ .Extra.identity.traits | toJson }}"

# Simple RBAC - Products API
- id: "simple-rbac-products-rule"
  upstream:
    url: "http://multi-tenancy-demo:9000"
    strip_path: "/api/simple-rbac"
  match:
    url: "<http|https>://<.*>/api/simple-rbac/products/<[^/]+><.*>"
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - PATCH
  authenticators:
    - handler: cookie_session
    - handler: bearer_token
  authorizer:
    handler: remote_json
    config:
      remote: "http://keto:4466/relation-tuples/check"
      payload: |
        {
          "namespace": "simple-rbac",
          "object": "product:items",
          "relation": "{{ if eq (index .MatchContext.RegexpCaptureGroups 0) "list" }}view{{ else }}{{ index .MatchContext.RegexpCaptureGroups 0 }}{{ end }}",
          "subject_id": "user:{{ print .Extra.identity.traits.email }}"
        }
  mutators:
    - handler: header
      config:
        headers:
          X-User-Id: "{{ .Subject }}"
          X-User-Email: "{{ .Extra.identity.traits.email }}"

# Simple RBAC - Categories API
- id: "simple-rbac-categories-rule"
  upstream:
    url: "http://multi-tenancy-demo:9000"
    strip_path: "/api/simple-rbac"
  match:
    url: "<http|https>://<.*>/api/simple-rbac/categories/<[^/]+><.*>"
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - PATCH
  authenticators:
    - handler: cookie_session
    - handler: bearer_token
  authorizer:
    handler: remote_json
    config:
      remote: "http://keto:4466/relation-tuples/check"
      payload: |
        {
          "namespace": "simple-rbac",
          "object": "category:items",
          "relation": "{{ if eq (index .MatchContext.RegexpCaptureGroups 0) "list" }}view{{ else }}{{ index .MatchContext.RegexpCaptureGroups 0 }}{{ end }}",
          "subject_id": "user:{{ print .Extra.identity.traits.email }}"
        }
  mutators:
    - handler: header
      config:
        headers:
          X-User-Id: "{{ .Subject }}"
          X-User-Email: "{{ .Extra.identity.traits.email }}"

# =============================================================================
# Use Case 2: Tenant-Centric RBAC (Multi-Tenant Role-Based Access Control)
# Path: /api/tenant-rbac/* -> strips prefix to /*
# =============================================================================

# Tenant RBAC - Users API
- id: "tenant-rbac-users-rule"
  upstream:
    url: "http://multi-tenancy-demo:9000"
    strip_path: "/api/tenant-rbac"
  match:
    url: "<http|https>://<.*>/api/tenant-rbac/users/<[^/]+><.*>"
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - PATCH
  authenticators:
    - handler: cookie_session
    - handler: bearer_token
  authorizer:
    handler: remote_json
    config:
      remote: "http://keto:4466/relation-tuples/check"
      payload: |
        {
          "namespace": "tenant-rbac",
          "object": "user:items",
          "relation": "{{ if eq (index .MatchContext.RegexpCaptureGroups 0) "list" }}view{{ else }}{{ index .MatchContext.RegexpCaptureGroups 0 }}{{ end }}",
          "subject_id": "user:{{ print .Extra.identity.traits.email }}"
        }
  mutators:
    - handler: header
      config:
        headers:
          X-User-Id: "{{ .Subject }}"
          X-User-Email: "{{ .Extra.identity.traits.email }}"
          X-User-Traits: "{{ .Extra.identity.traits | toJson }}"
          X-Tenant-Id: "{{ .MatchContext.Header.Get \"x-tenant-id\" }}"

# Tenant RBAC - Products API
- id: "tenant-rbac-products-rule"
  upstream:
    url: "http://multi-tenancy-demo:9000"
    strip_path: "/api/tenant-rbac"
  match:
    url: "<http|https>://<.*>/api/tenant-rbac/products/<[^/]+><.*>"
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - PATCH
  authenticators:
    - handler: cookie_session
    - handler: bearer_token
  authorizer:
    handler: remote_json
    config:
      remote: "http://keto:4466/relation-tuples/check"
      payload: |
        {
          "namespace": "tenant-rbac",
          "object": "product:items",
          "relation": "{{ if eq (index .MatchContext.RegexpCaptureGroups 0) "list" }}view{{ else }}{{ index .MatchContext.RegexpCaptureGroups 0 }}{{ end }}",
          "subject_id": "user:{{ print .Extra.identity.traits.email }}"
        }
  mutators:
    - handler: header
      config:
        headers:
          X-User-Id: "{{ .Subject }}"
          X-User-Email: "{{ .Extra.identity.traits.email }}"
          X-Tenant-Id: "{{ .MatchContext.Header.Get \"x-tenant-id\" }}"

# Tenant RBAC - Categories API
- id: "tenant-rbac-categories-rule"
  upstream:
    url: "http://multi-tenancy-demo:9000"
    strip_path: "/api/tenant-rbac"
  match:
    url: "<http|https>://<.*>/api/tenant-rbac/categories/<[^/]+><.*>"
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - PATCH
  authenticators:
    - handler: cookie_session
    - handler: bearer_token
  authorizer:
    handler: remote_json
    config:
      remote: "http://keto:4466/relation-tuples/check"
      payload: |
        {
          "namespace": "tenant-rbac",
          "object": "category:items",
          "relation": "{{ if eq (index .MatchContext.RegexpCaptureGroups 0) "list" }}view{{ else }}{{ index .MatchContext.RegexpCaptureGroups 0 }}{{ end }}",
          "subject_id": "user:{{ print .Extra.identity.traits.email }}"
        }
  mutators:
    - handler: header
      config:
        headers:
          X-User-Id: "{{ .Subject }}"
          X-User-Email: "{{ .Extra.identity.traits.email }}"
          X-Tenant-Id: "{{ .MatchContext.Header.Get \"x-tenant-id\" }}"

# =============================================================================
# Use Case 3: Resource-Scoped RBAC (Fine-Grained Permissions)
# Path: /api/resource-rbac/* -> strips prefix to /*
# =============================================================================

# Resource RBAC - Users API
- id: "resource-rbac-users-rule"
  upstream:
    url: "http://multi-tenancy-demo:9000"
    strip_path: "/api/resource-rbac"
  match:
    url: "<http|https>://<.*>/api/resource-rbac/users/<[^/]+><.*>"
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - PATCH
  authenticators:
    - handler: cookie_session
    - handler: bearer_token
  authorizer:
    handler: remote_json
    config:
      remote: "http://keto:4466/relation-tuples/check"
      payload: |
        {
          "namespace": "resource-rbac",
          "object": "user:items",
          "relation": "{{ if eq (index .MatchContext.RegexpCaptureGroups 0) "list" }}view{{ else }}{{ index .MatchContext.RegexpCaptureGroups 0 }}{{ end }}",
          "subject_id": "user:{{ print .Extra.identity.traits.email }}"
        }
  mutators:
    - handler: header
      config:
        headers:
          X-User-Id: "{{ .Subject }}"
          X-User-Email: "{{ .Extra.identity.traits.email }}"
          X-User-Traits: "{{ .Extra.identity.traits | toJson }}"
          X-Tenant-Id: "{{ .MatchContext.Header.Get \"x-tenant-id\" }}"

# Resource RBAC - Products API
- id: "resource-rbac-products-rule"
  upstream:
    url: "http://multi-tenancy-demo:9000"
    strip_path: "/api/resource-rbac"
  match:
    url: "<http|https>://<.*>/api/resource-rbac/products/<[^/]+><.*>"
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - PATCH
  authenticators:
    - handler: cookie_session
    - handler: bearer_token
  authorizer:
    handler: remote_json
    config:
      remote: "http://keto:4466/relation-tuples/check"
      payload: |
        {
          "namespace": "resource-rbac",
          "object": "product:items",
          "relation": "{{ if eq (index .MatchContext.RegexpCaptureGroups 0) "list" }}view{{ else }}{{ index .MatchContext.RegexpCaptureGroups 0 }}{{ end }}",
          "subject_id": "user:{{ print .Extra.identity.traits.email }}"
        }
  mutators:
    - handler: header
      config:
        headers:
          X-User-Id: "{{ .Subject }}"
          X-User-Email: "{{ .Extra.identity.traits.email }}"
          X-Tenant-Id: "{{ .MatchContext.Header.Get \"x-tenant-id\" }}"

# Resource RBAC - Categories API
- id: "resource-rbac-categories-rule"
  upstream:
    url: "http://multi-tenancy-demo:9000"
    strip_path: "/api/resource-rbac"
  match:
    url: "<http|https>://<.*>/api/resource-rbac/categories/<[^/]+><.*>"
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - PATCH
  authenticators:
    - handler: cookie_session
    - handler: bearer_token
  authorizer:
    handler: remote_json
    config:
      remote: "http://keto:4466/relation-tuples/check"
      payload: |
        {
          "namespace": "resource-rbac",
          "object": "category:items",
          "relation": "{{ if eq (index .MatchContext.RegexpCaptureGroups 0) "list" }}view{{ else }}{{ index .MatchContext.RegexpCaptureGroups 0 }}{{ end }}",
          "subject_id": "user:{{ print .Extra.identity.traits.email }}"
        }
  mutators:
    - handler: header
      config:
        headers:
          X-User-Id: "{{ .Subject }}"
          X-User-Email: "{{ .Extra.identity.traits.email }}"
          X-Tenant-Id: "{{ .MatchContext.Header.Get \"x-tenant-id\" }}"
